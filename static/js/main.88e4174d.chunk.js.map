{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","onBlur","error","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","htmlFor","type","classNames","e","target","NewMovie","onAdd","movieData","setMovieData","errors","setErrors","count","setCount","handleChange","fieldName","prevData","isFormValid","setIsFormValid","useEffect","isValid","trim","handleBlur","handleSubmit","a","preventDefault","prevCount","console","onSubmit","newValue","disabled","App","moviesFromServer","setMovies","newMovie","currentMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.88e4174d.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  onBlur?: () => void,\n  error?: boolean,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n  onBlur = () => {},\n  error = false,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !value;\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    onChange(e.target.value);\n  };\n\n  const handleBlur = () => {\n    setTouched(true);\n    onBlur();\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={handleInputChange}\n          onBlur={handleBlur}\n        />\n      </div>\n\n      {error && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie, Errors } from '../../types/Movie';\n\ntype NewMovieProps = {\n  onAdd: (newMovie: Movie) => void;\n};\n\nexport const NewMovie: React.FC<NewMovieProps> = ({ onAdd }) => {\n  const [movieData, setMovieData] = useState<Movie>({\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  });\n\n  const [errors, setErrors] = useState<Errors>({\n    title: false,\n    imgUrl: false,\n    imdbUrl: false,\n    imdbId: false,\n  });\n\n  const [touched, setTouched] = useState({\n    title: false,\n    imgUrl: false,\n    imdbUrl: false,\n    imdbId: false,\n  });\n\n  const [count, setCount] = useState(0); // State to trigger form reset\n\n  const handleChange = (fieldName: string, value: string) => {\n    setMovieData(prevData => ({\n      ...prevData,\n      [fieldName]: value,\n    }));\n  };\n\n  const [isFormValid, setIsFormValid] = useState(false);\n\n  useEffect(() => {\n    const isValid = movieData.title.trim() !== ''\n                   && movieData.imgUrl.trim() !== ''\n                   && movieData.imdbUrl.trim() !== ''\n                   && movieData.imdbId.trim() !== '';\n\n    setIsFormValid(isValid);\n  }, [movieData]);\n\n  const handleBlur = (fieldName: string) => {\n    setTouched({ ...touched, [fieldName]: true });\n    setErrors({ ...errors, [fieldName]: !movieData[fieldName].trim() });\n  };\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (isFormValid) {\n      try {\n        onAdd(movieData);\n\n        setMovieData({\n          title: '',\n          description: '',\n          imgUrl: '',\n          imdbUrl: '',\n          imdbId: '',\n        });\n        setCount(prevCount => prevCount + 1);\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error('Error submitting form:', error);\n      }\n    }\n  };\n\n  // const validateForm = () => {\n  //   setIsFormValid(movieData.title.trim() !== '');\n  // };\n\n  // useEffect(() => {\n  //   validateForm();\n  // });\n\n  return (\n    <form className=\"NewMovie\" key={count} onSubmit={handleSubmit}>\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={movieData.title}\n        onChange={(newValue) => handleChange('title', newValue)}\n        onBlur={() => handleBlur('title')}\n        required\n        error={touched.title && errors.title}\n        data-cy=\"movie-title\"\n      />\n\n      <TextField\n        name=\"description\"\n        value={movieData.description}\n        onChange={(newValue) => handleChange('description', newValue)}\n        data-cy=\"movie-description\"\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        value={movieData.imgUrl}\n        onChange={(newValue) => handleChange('imgUrl', newValue)}\n        onBlur={() => handleBlur('imgUrl')}\n        required\n        error={touched.imgUrl && errors.imgUrl}\n        data-cy=\"movie-imgUrl\"\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        value={movieData.imdbUrl}\n        onChange={(newValue) => handleChange('imdbUrl', newValue)}\n        onBlur={() => handleBlur('imdbUrl')}\n        required\n        error={touched.imdbUrl && errors.imdbUrl}\n        data-cy=\"movie-imdbUrl\"\n      />\n\n      <TextField\n        name=\"imdbId\"\n        value={movieData.imdbId}\n        onChange={(newValue) => handleChange('imdbId', newValue)}\n        onBlur={() => handleBlur('imdbId')}\n        required\n        error={touched.imdbId && errors.imdbId}\n        data-cy=\"movie-imdbId\"\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!isFormValid}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>(moviesFromServer);\n\n  const handleAddMovie = (newMovie: Movie) => {\n    setMovies(currentMovies => [...currentMovies, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={handleAddMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}